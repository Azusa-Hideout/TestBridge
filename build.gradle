import com.gtnewhorizons.retrofuturagradle.mcp.ReobfuscatedJar
import org.jetbrains.gradle.ext.Gradle

plugins {
  id("java")
  id("java-library")
  id("maven-publish")
  id("org.jetbrains.gradle.plugin.idea-ext") version "1.1.7"
  id("eclipse")
  id("com.gtnewhorizons.retrofuturagradle") version "1.3.19"
  id("com.matthewprenger.cursegradle") version "1.4.0"
  id 'com.diffplug.spotless' version '6.7.2'
}

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(8))
    // Azul covers the most platforms for Java 8 toolchains, crucially including MacOS arm64
    vendor.set(org.gradle.jvm.toolchain.JvmVendorSpec.AZUL)
  }
  // Generate sources and javadocs jars when building and publishing
  //withSourcesJar()
  //withJavadocJar()
}

project.extensions.add(com.diffplug.blowdryer.Blowdryer, "Blowdryer", com.diffplug.blowdryer.Blowdryer) // Make blowdryer available in "apply from:" scripts
apply plugin: 'com.diffplug.spotless'
apply from: Blowdryer.file('spotless.gradle')

tasks.withType(JavaCompile).configureEach {
  options.encoding = "UTF-8"
}

configurations {
  embed
  implementation.extendsFrom(embed)
}

minecraft {
  mcVersion = '1.12.2'
  username = "Player0"
  def args = ["-ea:${project.group}"]
  if (project.use_coremod.toBoolean()) {
    args << '-Dfml.coreMods.load=' + coremod_plugin_class_name
  }
  if (project.use_mixins.toBoolean()) {
    args << '-Dmixin.hotSwap=true'
    args << '-Dmixin.checks.interfaces=true'
    args << '-Dmixin.debug.export=true'
  }
  args << '-XXaltjvm=dcevm'
  args << '-javaagent:d:\\hotswapagent142.jar'
  args << '-Dtb.debugging=true'

  extraRunJvmArguments.addAll(args)

  // Uncomment if needed
//  useDependencyAccessTransformers = true

  injectedTags.put("VERSION", project.version)
  injectedTags.put("MODID", project.archivesBaseName)
  injectedTags.put("MODNAME", project.mod_name)
}

// Generate a my.project.Tags class with the version number as a field
tasks.injectTags.configure {
  outputClassName.set("${project.group}.${project.archivesBaseName}.core.Reference")
}

repositories {
  maven {
    url = 'https://maven.cleanroommc.com'
  }
  maven {
    url 'https://jitpack.io'
  }
  //maven { url = "https://repo.spongepowered.org/maven" }
  //maven { url "https://maven.mcmoddev.com/" }
  maven {
    url "https://cursemaven.com"
    content {
      includeGroup "curse.maven"
    }
  }
  maven {
    url = "https://maven.removeco.de/"
  }
  maven {
    name "Ellpeck"
    url "https://maven.ellpeck.de"
  }
  mavenLocal() // Must be last for caching to work
}

dependencies {
  if (project.use_assetmover.toBoolean()) {
    implementation 'com.cleanroommc:assetmover:2.0'
  }
  if (project.use_mixins.toBoolean()) {
    implementation 'zone.rong:mixinbooter:8.2'
  }

  // CurseMaven
  // required deobf component
  api rfg.deobf("${project.mui_dep}")
  api rfg.deobf("${project.mcmp_dep}")
  api rfg.deobf("${project.td_dep}")
  api rfg.deobf("${project.lp_dep}")
  api rfg.deobf("${project.ae2_dep}")

  // non deobf component
  api "${project.hei_dep}"
  implementation "${project.rf_dep}"
  implementation "${project.ccl_dep}"
  implementation "${project.top_dep}"

  // required mods on runtime
  runtimeOnly "${project.rs_dep}"
  runtimeOnly "${project.te_dep}"
  runtimeOnly "${project.tf_dep}"
  runtimeOnly "${project.cofhc_dep}"
  runtimeOnly "${project.cofhw_dep}"

  // outside cursemaven
  compileOnly group: 'codechicken', name: 'NotEnoughItems', version: '1.12.2-2.4.3.245', classifier: 'deobf', transitive: false
  compileOnly group: 'li.cil.oc', name: 'OpenComputers', version: 'MC1.12.2-1.7.5.205', classifier: 'api' // "haha you cant compiling without me"
  compileOnly group: 'de.ellpeck.actuallyadditions', name : 'ActuallyAdditions', version: '1.12.2-r152.16', classifier: 'api'
  compileOnly group: 'com.mod-buildcraft', name: 'buildcraft-all', version: '7.99.24.6', transitive: false
  compileOnly group: 'com.jaquadro.minecraft.storagedrawers', name: 'StorageDrawers', version: '1.12.2-5.4.2', transitive: false
  compileOnly group: 'pl.asie.charset', name: 'Charset', version: '0.5.6.6', classifier: 'api', transitive: false

  if (project.use_mixins.toBoolean()) {
    String mixinDep = modUtils.enableMixins('zone.rong:mixinbooter:8.2')
    api (mixinDep) {transitive = false}
    annotationProcessor('org.ow2.asm:asm-debug-all:5.2')
    annotationProcessor('com.google.guava:guava:24.1.1-jre')
    annotationProcessor('com.google.code.gson:gson:2.8.6')
    annotationProcessor (mixinDep) {transitive = false}
  }
}

def mixinConfigRefMap = 'mixins.' + project.archives_base_name + '.refmap.json'
def mixinTmpDir = buildDir.path + File.separator + 'tmp' + File.separator + 'mixins'
def refMap = "${mixinTmpDir}" + File.separator + mixinConfigRefMap
def mixinSrg = "${mixinTmpDir}" + File.separator + "mixins.srg"

if (project.use_mixins.toBoolean()) {
  tasks.named("reobfJar", ReobfuscatedJar).configure {
    extraSrgFiles.from(mixinSrg)
  }

  tasks.named("compileJava", JavaCompile).configure {
    doFirst {
      new File(mixinTmpDir).mkdirs()
    }
    options.compilerArgs += [
            "-AreobfSrgFile=${tasks.reobfJar.srg.get().asFile}",
            "-AoutSrgFile=${mixinSrg}",
            "-AoutRefMapFile=${refMap}",
    ]
  }
}

if (project.use_access_transformer.toBoolean()) {
  for (File at : sourceSets.getByName("main").resources.files) {
    if (at.name.toLowerCase().endsWith("_at.cfg")) {
      tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from(at)
      tasks.srgifyBinpatchedJar.accessTransformerFiles.from(at)
    }
  }
}

processResources {
  // this will ensure that this task is redone when the versions change.
  inputs.property 'version', project.version
  inputs.property 'mcversion', project.minecraft.version
  exclude("spotless.gradle")
  // replace stuff in mcmod.info, nothing else
  filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
    // replace version and mcversion
    fcd.expand (
            'version': project.version,
            'mcversion': project.minecraft.version,
            'modid': project.archivesBaseName,
            'modname': project.mod_name
    )
  }

  if (project.use_access_transformer.toBoolean()) {
    rename '(.+_at.cfg)', 'META-INF/$1' // Access Transformers
  }

  if (project.use_mixins.toBoolean()) {
    // Embed mixin refmap
    from refMap
    dependsOn("compileJava")
  }
}

jar {
  manifest {
    def attribute_map = [:]
    if (project.use_coremod.toBoolean()) {
      attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
      if (project.include_mod.toBoolean()) {
        attribute_map['FMLCorePluginContainsFMLMod'] = true
        attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == "build"
      }
    }
    if (project.use_access_transformer.toBoolean()) {
      attribute_map['FMLAT'] = project.archives_base_name + '_at.cfg'
    }
    attributes(attribute_map)
  }
  // Add all embedded dependencies into the jar
  from(provider{ configurations.embed.collect {it.isDirectory() ? it : zipTree(it)} })
}

idea {
  module { inheritOutputDirs = true }
  project { settings {
    runConfigurations {
      "1. Run Client"(Gradle) {
        taskNames = ["runClient"]
      }
      "2. Run Server"(Gradle) {
        taskNames = ["runServer"]
      }
      "3. Run Obfuscated Client"(Gradle) {
        taskNames = ["runObfClient"]
      }
      "4. Run Obfuscated Server"(Gradle) {
        taskNames = ["runObfServer"]
      }
      "5. Apply spotless"(Gradle) {
        taskNames = ["spotlessApply"]
      }
    }
    compiler.javac {
      afterEvaluate {
        javacAdditionalOptions = "-encoding utf8"
        moduleJavacAdditionalOptions = [
                (project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')
        ]
      }
    }
  }}
}

tasks.named("processIdeaSettings").configure {
  dependsOn("injectTags")
}

for (runTask in ["runClient", "runServer"]) {
  tasks.named(runTask).configure {
    extraJvmArgs.add('-Dfml.coreMods.load=logisticspipes.asm.LogisticsPipesCoreLoader')
  }
}